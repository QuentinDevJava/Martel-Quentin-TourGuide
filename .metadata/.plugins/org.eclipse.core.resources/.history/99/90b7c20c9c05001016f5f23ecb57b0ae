package com.openclassrooms.tourguide.service;

import java.util.Comparator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;

import org.springframework.stereotype.Service;

import com.openclassrooms.tourguide.user.User;
import com.openclassrooms.tourguide.user.UserReward;

import gpsUtil.GpsUtil;
import gpsUtil.location.Attraction;
import gpsUtil.location.Location;
import gpsUtil.location.VisitedLocation;
import lombok.extern.slf4j.Slf4j;
import rewardCentral.RewardCentral;

@Slf4j
@Service
public class RewardsService {
	private static final double STATUTE_MILES_PER_NAUTICAL_MILE = 1.15077945;

	// proximity in miles
	private int defaultProximityBuffer = 10;
	private int proximityBuffer = defaultProximityBuffer;
	private int attractionProximityRange = 200;
	private long limit = 5;
	private final GpsUtil gpsUtil;
	private final RewardCentral rewardsCentral;

	public RewardsService(GpsUtil gpsUtil, RewardCentral rewardCentral) {
		this.gpsUtil = gpsUtil;
		this.rewardsCentral = rewardCentral;
	}

	public void setProximityBuffer(int proximityBuffer) {
		this.proximityBuffer = proximityBuffer;
	}

	public void setDefaultProximityBuffer() {
		proximityBuffer = defaultProximityBuffer;
	}

//	public void calculateRewards(User user) {
//		List<VisitedLocation> userLocations = user.getVisitedLocations();
//		List<Attraction> attractions = gpsUtil.getAttractions();
//		Map<Attraction, VisitedLocation> attractionToBeRewards = new HashMap<>();
//
//		for (VisitedLocation visitedLocation : userLocations) {
//			for (Attraction attraction : attractions) {
//				if (nearAttraction(visitedLocation, attraction)) {
//					attractionToBeRewards.put(attraction, visitedLocation);
//				}
//			}
//		}
//		for (Map.Entry<Attraction, VisitedLocation> entry : attractionToBeRewards.entrySet()) {
//			user.addUserReward(new UserReward(entry.getValue(), entry.getKey(), getRewardPoints(entry.getKey(), user)));
//		}
//	}

	public void calculateRewards(User user) {
		List<VisitedLocation> userLocations = user.getVisitedLocations();
		List<Attraction> attractions = gpsUtil.getAttractions();
		CopyOnWriteArrayList<String> rewardedAttractions = new CopyOnWriteArrayList<>();

		for (VisitedLocation visitedLocation : userLocations) {
			for (Attraction attraction : attractions) {
				if (!rewardedAttractions.contains(attraction.attractionName)) {
					if (nearAttraction(visitedLocation, attraction)) {
						UserReward userReward = new UserReward(visitedLocation, attraction,
								getRewardPoints(attraction, user));
						user.addUserReward(userReward);
						rewardedAttractions.(attraction.attractionName);
					}
				}
			}
		}
	}

	// TODO utilisÃ© dans les test uniquement delete ???
	public boolean isWithinAttractionProximity(Attraction attraction, Location location) {
		return getDistance(attraction, location) > attractionProximityRange ? false : true;
	}

	private boolean nearAttraction(VisitedLocation visitedLocation, Attraction attraction) {
		return getDistance(attraction, visitedLocation.location) > proximityBuffer ? false : true;
	}

	private int getRewardPoints(Attraction attraction, User user) {
		return rewardsCentral.getAttractionRewardPoints(attraction.attractionId, user.getUserId());
	}

	public double getDistance(Location loc1, Location loc2) {
		double lat1 = Math.toRadians(loc1.latitude);
		double lon1 = Math.toRadians(loc1.longitude);
		double lat2 = Math.toRadians(loc2.latitude);
		double lon2 = Math.toRadians(loc2.longitude);

		double angle = Math
				.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon1 - lon2));

		double nauticalMiles = 60 * Math.toDegrees(angle);
		double statuteMiles = STATUTE_MILES_PER_NAUTICAL_MILE * nauticalMiles;
		return statuteMiles;
	}

	public List<Attraction> addFiveNearestAttraction(Location location, List<Attraction> attractions) {

		return attractions.stream().sorted(Comparator.comparingDouble(attraction -> getDistance(location, attraction)))
				.limit(limit).toList();
	}

}
